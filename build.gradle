plugins {
    id 'java'
    id 'org.springframework.boot' version '3.3.1'
    id 'io.spring.dependency-management' version '1.1.5'
    id 'org.asciidoctor.jvm.convert' version '3.3.2'
    // Spring Rest Docs 의 결과물을 OpneAPI3 스펙으로 변환
    id 'com.epages.restdocs-api-spec' version '0.19.4'
    // OpenAPI3 스펙을 기반으로 SwaggerUI를 생성
    id 'org.hidetake.swagger.generator' version '2.19.2'
}

group = 'com.board'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '17'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
    maven { url 'https://repo.spring.io/snapshot' }
}

ext {
    set('springCloudVersion', "2023.0.2")
    snippetsDir = file('build/generated-snippets')
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-cache'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.cloud:spring-cloud-starter-openfeign'

    // Swagger UI
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.5.0'

    // Spring REST Docs
    testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'

    // REST Docs API Spec 의존성
    testImplementation 'com.epages:restdocs-api-spec-mockmvc:0.19.4'

    // DB
    runtimeOnly 'com.h2database:h2'

    // ORM
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'

    // QueryDSL
    implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
    annotationProcessor 'com.querydsl:querydsl-apt:5.0.0:jakarta'
    annotationProcessor 'jakarta.annotation:jakarta.annotation-api'
    annotationProcessor 'jakarta.persistence:jakarta.persistence-api'

    // Lombok
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    // Test dependencies
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    // Common utilities
    implementation 'org.apache.commons:commons-lang3:3.14.0'

    // JWT
    implementation 'io.jsonwebtoken:jjwt-api:0.12.3'
    implementation 'io.jsonwebtoken:jjwt-impl:0.12.3'
    implementation 'io.jsonwebtoken:jjwt-jackson:0.12.3'
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

tasks.named('test') {
    useJUnitPlatform()
}

openapi3 {
    servers = [
            // 2개 이상 설정하고자 하는 경우, 추가 가능
            { url = "http://localhost:80"; description = "Local server" }
    ]
    title = "게시판 이용자의 포인트 관리 서비스 (토이 프로젝트)"
    description = "Java 17 & Spring Boot 3.3.1."
    version = "1.0.0"
    format = 'json'
    outputDirectory = 'build/resources/main/static/docs'
    // REST Docs 스니펫 경로 설정
    snippetsDirectory = snippetsDir
}

// QueryDSL 빌드 옵션
def querydslDir = layout.buildDirectory.dir("generated/querydsl").get().asFile

sourceSets {
    main.java.srcDirs += [querydslDir]
}

tasks.withType(JavaCompile).configureEach {
    options.getGeneratedSourceOutputDirectory().set(file(querydslDir))
}

clean.doLast {
    file(querydslDir).deleteDir()
}

// disable plain jar
jar {
    enabled = false
}

// enable executable jar
bootJar {
    archivesBaseName = 'project-board'
    archiveFileName = 'project-board.jar'
    archiveVersion = "0.0.1"
    mainClass = 'com.board.api.ProjectBoardApplication'
    dependsOn(':test')
    dependsOn(':openapi3')
}